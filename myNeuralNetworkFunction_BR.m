function [y1] = myNeuralNetworkFunction_BR(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Jul-2021 12:16:11.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.608695652173913;0.82370820668693;0.433566433566434;0.0124984476084822;0];
x1_step1.gain = [5.11111111111111;11.3448275862069;3.53086419753086;2.02531327181859;4];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.00035174026259418046669;0.00051092816047968955297;-0.00048391175546749315125;-0.00050981894364561498;0.00053107338220117399161;0.00042076275179294889269;-0.08001026386788413769;-0.00052123117927782200952;0.15745448440093531839;-0.067634534449094715902];
IW1_1 = [0.00029940427633355415132 -0.00091351092567174430742 0.00035050945272335786752 0.00054201144080147822986 -0.0006553261154915732481;0.00043483496913422018532 -0.0013268466275537572387 0.00050908684357890937426 0.00078723075997475118991 -0.00095181600158640057574;-0.00041185539151189476913 0.0012567042505490203137 -0.00048217772185979798508 -0.00074561911857309566901 0.00090150388804861110621;-0.00043389146051596373839 0.0013239667398766085359 -0.00050798200136364002506 -0.00078552225583856721478 0.00094975028080367834317;0.00045196848775252984609 -0.0013791473561833049108 0.00052915087847809467135 0.00081825737359259107656 -0.00098932999443373213777;0.00035813397574167632129 -0.0010927404007482076527 0.00041927332239120770592 0.00064834552211519617081 -0.00078389209306386792731;0.60348615247481129931 -0.31381583708022858792 0.57257217686362416043 0.58517705395397245915 -0.00041552308730919947435;-0.00044359788315542270955 0.0013535954267334779529 -0.00051934848696569009107 -0.000803099149488242358 0.00097100231079647308235;-0.17588209086211484267 -0.11370070401550631811 -0.98882602763530946799 0.27919569916621544969 0.068327356243596343299;-0.8882180602117247803 0.1560561953219604947 -0.4013236356394274118 -0.18485228807893513969 0.051201117667770981723];

% Layer 2
b2 = 0.21194446183604778722;
LW2_1 = [0.0013771378901323138438 0.0020005088943848372586 -0.0018946378611525214845 -0.0019967650998719966952 0.0020801898158251267215 0.0016473761574264276716 0.56432693796989685797 -0.0020410398899658637253 -1.1382824405110656407 0.52130642137983940199];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.53086419753086;
y1_step1.xoffset = 0.433566433566434;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
