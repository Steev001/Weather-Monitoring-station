function [y1] = myNeuralNetworkFunction_LM(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 12-Jul-2021 12:17:06.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.608695652173913;0.82370820668693;0.433566433566434;0.0124984476084822;0];
x1_step1.gain = [5.11111111111111;11.3448275862069;3.53086419753086;2.02531327181859;4];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.1949853578616629335;-1.7469328441935882967;0.99240755064494678983;1.0218472696166676084;-0.20364962239710274194;0.075006696145808071652;0.86849978954689988075;-1.7528113775439608801;-2.1635286289685735639;1.9533738151333810418];
IW1_1 = [-1.0200111942236536056 0.18371207872449493714 -1.4761242942088723673 -0.68794352417100779196 1.0905174575592302411;0.15849883407858353368 -0.76811703825605215368 1.6988832804854816505 -0.68283686162590440105 0.67432444400053681566;-0.64349214417223599138 0.40030808532394601684 1.1057920048993226114 0.21412508236109187298 1.1990683467370717441;-0.48795612410084338029 -1.2250250302922145451 0.67407093082124247552 0.81674746062738967645 -1.5287905283841298765;0.36787248393377131039 0.64062360566131126838 1.4243599683899237363 -0.54873720927763891542 -1.4872545148778710811;-0.9268852109842726783 -1.0196075464390572662 -0.34597136023448776809 -1.4471455571856632893 -0.5530734974790058045;0.48424032314825560253 -0.1811170079280729206 0.97468818170933824163 -1.3859231772694791118 1.142501422637789199;-0.64255807181742796708 0.67010085976123234808 -2.6434921749012407766 -0.68891688899908154475 1.4610370159121313094;0.15189272482242013873 0.50924382354552510943 1.5003722988369436742 -1.9880704228772694275 0.8904186285136883594;0.28925144735049329592 0.5742974445922626181 -1.0987458626795434391 -2.0475217260707032629 -0.7219189729790551624];

% Layer 2
b2 = 0.49227585916764610152;
LW2_1 = [-0.5167614963278497342 -0.11906540081385030838 0.61823532419030025054 0.19156553538645498813 0.23647371873576578105 -0.012726615235693293157 0.092360116876703701738 -0.334773211566524731 0.42646907290742258612 -0.34115551012335215697];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.53086419753086;
y1_step1.xoffset = 0.433566433566434;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
